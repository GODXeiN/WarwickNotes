\BOOKMARK [1][-]{section.1}{What is Functional Programming}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{History}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Today}{section.1}% 3
\BOOKMARK [2][-]{subsection.1.3}{Programming Paradigms}{section.1}% 4
\BOOKMARK [2][-]{subsection.1.4}{What Haskell is good for}{section.1}% 5
\BOOKMARK [3][-]{subsubsection.1.4.1}{Web Services}{subsection.1.4}% 6
\BOOKMARK [3][-]{subsubsection.1.4.2}{Domain-specific language}{subsection.1.4}% 7
\BOOKMARK [3][-]{subsubsection.1.4.3}{Games}{subsection.1.4}% 8
\BOOKMARK [3][-]{subsubsection.1.4.4}{System Software}{subsection.1.4}% 9
\BOOKMARK [1][-]{section.2}{Haskell Files}{}% 10
\BOOKMARK [2][-]{subsection.2.1}{Defining functions}{section.2}% 11
\BOOKMARK [3][-]{subsubsection.2.1.1}{Lambda Functions}{subsection.2.1}% 12
\BOOKMARK [3][-]{subsubsection.2.1.2}{Arguments}{subsection.2.1}% 13
\BOOKMARK [2][-]{subsection.2.2}{Operators}{section.2}% 14
\BOOKMARK [2][-]{subsection.2.3}{Pattern Matching}{section.2}% 15
\BOOKMARK [2][-]{subsection.2.4}{Module}{section.2}% 16
\BOOKMARK [1][-]{section.3}{Compiling}{}% 17
\BOOKMARK [2][-]{subsection.3.1}{Types}{section.3}% 18
\BOOKMARK [2][-]{subsection.3.2}{Polymorphism}{section.3}% 19
\BOOKMARK [2][-]{subsection.3.3}{Tuples}{section.3}% 20
\BOOKMARK [2][-]{subsection.3.4}{Currying}{section.3}% 21
\BOOKMARK [2][-]{subsection.3.5}{Lists}{section.3}% 22
\BOOKMARK [1][-]{section.4}{List Comprehensions}{}% 23
\BOOKMARK [1][-]{section.5}{Map and filter}{}% 24
\BOOKMARK [2][-]{subsection.5.1}{Filter}{section.5}% 25
\BOOKMARK [2][-]{subsection.5.2}{Map}{section.5}% 26
\BOOKMARK [2][-]{subsection.5.3}{Ranges}{section.5}% 27
\BOOKMARK [1][-]{section.6}{Type Classes}{}% 28
\BOOKMARK [2][-]{subsection.6.1}{Implementation}{section.6}% 29
\BOOKMARK [2][-]{subsection.6.2}{Using type classes}{section.6}% 30
\BOOKMARK [2][-]{subsection.6.3}{Different Type classes}{section.6}% 31
\BOOKMARK [3][-]{subsubsection.6.3.1}{Eq}{subsection.6.3}% 32
\BOOKMARK [3][-]{subsubsection.6.3.2}{Num}{subsection.6.3}% 33
\BOOKMARK [3][-]{subsubsection.6.3.3}{Ord}{subsection.6.3}% 34
\BOOKMARK [3][-]{subsubsection.6.3.4}{Read and Show}{subsection.6.3}% 35
\BOOKMARK [3][-]{subsubsection.6.3.5}{Integral and Floating}{subsection.6.3}% 36
\BOOKMARK [3][-]{subsubsection.6.3.6}{Enum}{subsection.6.3}% 37
\BOOKMARK [3][-]{subsubsection.6.3.7}{Foldable}{subsection.6.3}% 38
\BOOKMARK [2][-]{subsection.6.4}{Referential Transparency}{section.6}% 39
\BOOKMARK [1][-]{section.7}{Recursion}{}% 40
\BOOKMARK [2][-]{subsection.7.1}{Recursion on lists}{section.7}% 41
\BOOKMARK [2][-]{subsection.7.2}{Explicit Recursion and Implicit Recursion}{section.7}% 42
\BOOKMARK [2][-]{subsection.7.3}{Folding}{section.7}% 43
\BOOKMARK [2][-]{subsection.7.4}{Functor}{section.7}% 44
\BOOKMARK [2][-]{subsection.7.5}{Laws}{section.7}% 45
\BOOKMARK [3][-]{subsubsection.7.5.1}{Functor laws}{subsection.7.5}% 46
\BOOKMARK [3][-]{subsubsection.7.5.2}{Associativity}{subsection.7.5}% 47
\BOOKMARK [3][-]{subsubsection.7.5.3}{Operator Precedence}{subsection.7.5}% 48
\BOOKMARK [1][-]{section.8}{Let and Where}{}% 49
\BOOKMARK [1][-]{section.9}{Data}{}% 50
\BOOKMARK [2][-]{subsection.9.1}{Constructors with parameters}{section.9}% 51
\BOOKMARK [2][-]{subsection.9.2}{Polymorphic Data types}{section.9}% 52
\BOOKMARK [2][-]{subsection.9.3}{Deriving type classes}{section.9}% 53
\BOOKMARK [1][-]{section.10}{Combinators}{}% 54
\BOOKMARK [2][-]{subsection.10.1}{Function Composition}{section.10}% 55
\BOOKMARK [1][-]{section.11}{Algebraic Data Types}{}% 56
\BOOKMARK [2][-]{subsection.11.1}{Either}{section.11}% 57
\BOOKMARK [2][-]{subsection.11.2}{Either}{section.11}% 58
\BOOKMARK [2][-]{subsection.11.3}{Recursive data types}{section.11}% 59
